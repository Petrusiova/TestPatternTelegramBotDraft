import telebot

bot = telebot.TeleBot('5799725631:AAEYhs-pE1MNRfYlJaMwuju3fZMEKny9WLE')


@bot.message_handler(commands=['start'])
def start(message):
    msg = bot.send_message(message.chat.id,
                           text="Добро пожаловать в <b>паттерны для автоматизации тестирования</b>\n\n"
                                "Шаблоны автоматизации тестирования наиболее полезны, если вы можете сосредоточиться на тех, "
                                "которые действительно помогают решить ваши проблемы. Мы начинаем процесс диагностики:\n\n"

                                "/improve - <b>Улучшение автоматизации тестирования</b> - если Вы недовольны своей текущей автоматизацией или она  не дает вам желаемых преимуществ\n\n"
                                "/no_previous_test_automation - <b>Автоматизации еще не было</b> - если Вы только начинаете с автоматизации и никогда не делали этого раньше\n\n"
                                "/limited_experience - <b>Нет опыта в автоматизации тестирования</b> - если Вы присоединяетесь к команде и не имеете опыта в автоматизации тестирования\n\n"
                                "/test_automation_issues - <b>Конкретные проблемы в автоматизации</b> -если Вы уже знаете какие у вас проблемы с автоматизацией\n\n"

                                "Совет:\n"
                                "- Если первый вариант не соответствует вашей ситуации, вернитесь на эту страницу и попробуйте другой\n\n"
                                "- Если в вашей компании есть разные команды, работающие с автоматизацией, пусть каждая из них сначала выполнит диагностику самостоятельно. \n\n"
                                "/localized_regimes - <b>Локализованные режимы</b> - если проблемы команд существенно отличаются. Это признак того, что каждая команда работает полностью независимо от других, нет обмена экспертизой, методами, стандартами и т. д."
                           , parse_mode='html')


@bot.message_handler(commands=['improve'])
def improve(message):
    msg = bot.send_message(message.chat.id,
                           text="<b>Улучшение автоматизации тестирования</b>\n\n"
                                "Что ниже описывает самую насущную проблему, которую вам нужно решить в данный момент?\n\n"

                                "/lack_of_support - <b>Отсутствие поддержки</b> (со стороны руководства, тестировщиков, разработчиков и т. д.)\n\n"
                                "/lack_of_resources - <b>Нехватка ресурсов</b> (персонал, ПО, оборудование, время и т. д.)\n\n"
                                "/lack_of_direction - <b>Отсутствие направления</b> (что автоматизировать, какую архитектуру реализовать и т. д.)\n\n"
                                "/lack_of_specific_knowledge - <b>Отсутствие конкретных знаний</b> (как протестировать ПО (SUT), какие использовать инструменты, как на самом деле работает автоматизация, написать поддерживаемую автоматизацию и т. д.)\n\n"
                                "/management_expectations_not_met - <b>Ожидания руководства в отношении автоматизации не оправдались</b> (окупаемость инвестиций (ROI), отставание от графика и т. д.)\n\n"
                                "/automation_exec_expectations_not_met - <b>Ожидания от автоматизации не оправдались</b> (скрипты ненадежны или слишком медленны, тесты не могут выполняться самостоятельно и т. д.)\n\n"
                                "/automation_maintenance_expectations_not_met - <b>Ожидания по тех. обслуживанию не оправдались</b> (недокументированные данные или сценарии, отсутствие контроля версий и т. д.)\n\n"

                                "Примечание:\n\n"
                                "Если более одного ответа подходит для вашего случая, начните с самого сложного. После того, как вы решите его, вернитесь к этому вопросу и займитесь следующими.\n\n"
                                "Если вы хотите возродить автоматизацию тестирования, то переходите к проблеме:\n\n"
                                "/stalled_automation - <b>Автоматизация утеряна</b> - чтобы получить обзор возможных шаблонов решения\n\n"

                                "/start - Вернуться к началу процесса диагностики"
                           , parse_mode='html')


@bot.message_handler(commands=['no_previous_test_automation'])
def no_previous_test_automation(message):
    msg = bot.send_message(message.chat.id,
                           text=open('patterns/patterns_no_prev_auto.txt', 'r').read() +

                                "\n\n/set_clear_goals Установить четкие цели Эта модель имеет решающее значение. Он должен быть применен в начале любых больших или малых усилий по автоматизации\n\n"
                                "/management_support - <b>Поддержка менеджмента</b> Важно чтобы поддержка автоматизации НЕ выполнялась в одиночку во избежании остановок т.к. информацией владеет только 1 человек\n\n"
                                "/test_automation_owner - <b>Ответственный</b> не только для внедрения автоматизации тестирования, но и для поддержания ее работы в будущем\n\n"
                                "/dedicated_resources - <b>Выделенные ресурсы</b> Эта модель особенно важна в начале новых усилий по автоматизации. В зависимости от размера вашей автоматизации вы можете позже ослабить ее использование.\n\n"
                                "/right_tools - <b>Правильные инструменты.</b> Этот шаблон необходим не только для длительной автоматизации, но и для быстрых исправлений\n\n"
                                "/automation_roles - <b>Роли автоматизации.</b> Используйте этот шаблон для заполнения ролей, необходимых для разработки тестового программного обеспечения автоматизации. Если возможно, используйте /whole_team_approach - <b>Подход всей команды</b> - и по необходимости /get_training - проводите <b>Обучение для команды</b>\n\n"
                                "/plan_support_activities - <b>Плановая поддержка</b> Не забудьте применить этот шаблон, если вы хотите иметь возможность соблюдать свои расписания. Недостающая поддержка со стороны специалистов может довольно эффективно заземлить проект!\n\n"
                                "/maintainable_testware - <b>Поддерживаемое тестовое обеспечение.</b> Применяйте этот шаблон с самого начала, если вы хотите, чтобы ваши усилия по автоматизации были длительными, а расходы на техническое обслуживание были низкими.\n\n"
                                "/automate_whats_needed - <b>Автоматизируйте то что нужно.</b> Этот шаблон показывает вам, как выбрать функции, наиболее достойные автоматизации\n\n"
                                "/take_small_steps - <b>Маленькие шаги</b> Эта модель особенно важна в начале, но ее всегда следует иметь в виду\n\n"
                                "/unattended_test_execution - <b>Необратимое выполнение теста.</b> Этот шаблон дает вам последние предложения о том, как закончить с автоматизацией тестирования\n\n"

                                "/start - Вернуться к началу процесса диагностики"
                           , parse_mode='html')


@bot.message_handler(commands=['limited_experience'])
def limited_experience(message):
    msg = bot.send_message(message.chat.id,
                           text=open('limitedExperience/limitedExperience.txt', 'r').read() +
                                "\n/tester - <b>Тестировщик</b>\n\n"
                                "/developer - <b>Разработчик</b>\n\n"
                                "/test_manager - <b>Тест-менеджер</b>\n\n"

                                "Наиболее рекумендуемые:\n\n"

                                "/check_to_learn - <b>Проверка</b> - позвольте новым членам команды учиться, проверяя работоспособность существующего тестового ПО\n\n"
                                "/document_the_testware - <b>Документация инструментов тестирования</b> - используйте с самого начала применения инструментов\n\n"
                                "/do_a_pilot - <b>Подготовка пилота</b> - используйте при запуске автоматизации, чтобы члены команды могли научиться\n\n"
                                "/get_training - <b>Обучение для команды</b> - после выбора инструментов и архитектуры, а также для ручных тестировщиков, чтобы научиться писать тест-кейсы, подходящие для автоматизации.\n\n"
                                "/ask_for_help - <b>Просьба о помощи</b> - просить о помощи - это не трудно\n\n"

                                "Также полезно:\n\n"

                                "/pair_up - <b>Разделиться на пары</b> - когда новички должны интегрироваться в команду как можно быстрее\n\n"
                                "/take_small_steps - <b>Маленькие шаги</b> - Москва не сразу строилась\n\n"
                                "/steel_thread - <b>End 2 end</b> - хороший шаблон для обучения автоматизации тестирования через SUT\n\n"
                                "/prefer_familiar_solutions - <b>Знакомые решения</b> - если члены команды уже используют инструменты или процессы, которые могут быть успешно применены также к проекту автоматизации тестирования.\n\n"

                                "/start - Вернуться к началу процесса диагностики"

                           , parse_mode='html')


@bot.message_handler(commands=['test_automation_issues'])
def test_automation_issues(message):
    msg = bot.send_message(message.chat.id,
                           text=open('testAutoIssues/testAutoIssues.txt', 'r').read() +
                                "\n/inefficient_failure_analysis - <b>Неэффективный анализ сбоев</b>\n\n"
                                "/hard_to_automate - <b>Трудности автоматизации</b>\n\n"
                                "Однако одной из основных причин неудачи является сосредоточение исключительно на технических аспектах. Другие проблемы связаны с тем, как вы работаете, такие как:\n\n"
                                "/late_test_case_design - <b>Поздний тест-дизайн</b>\n\n"
                                "/stalled_automation - <b>Автоматизация утеряна</b> - когда автоматизация, кажется, начинается хорошо, но затем останавливается\n\n"
                                "/high_roi_expectations - <b>Ожидание высокой рентабельности</b>\n\n"

                                "Некоторые проблемы могут возникнуть из-за технических или управленческих проблем."
                                "Мы классифицируем проблемы на следующие категории:\n\n"

                                "/process_issues - <b>Проблемы процесса</b> - как мы работаем с автоматизированными тестами и инструментами\n\n"
                                "/management_issues - <b>Проблемы управления</b> - вопросы управления, кадрового расписания, целей (необходимо время, деньги или люди для исправления)\n\n"
                                "/design_issues - <b>Проблемы проектирования</b> - архитектура тестового программного обеспечения, включая ремонтопригодность\n\n"
                                "/execution_issues - <b>Проблемы с выполнением</b> - запуск тестов в их автоматизированной форме\n\n"

                                "Обратите внимание на:\n\n"

                                "/failure_patterns - <b>Шаблоны отказов</b> - также являются своего рода проблемой, потому что они описывают поведение, которое, если не будет признано вовремя, может поставить под угрозу даже, казалось бы, успешные проекты автоматизации тестирования. Их также называют 'антипаттернами'.\n\n"

                                "/start - Вернуться к началу процесса диагностики"

                           , parse_mode='html')


@bot.message_handler(commands=['localized_regimes'])
def localized_regimes(message):
    msg = bot.send_message(message.chat.id,
                           text="<b>Локализованные режимы</b>\n\n"
                                "Краткое описание проблемы:\n\n"
                                "Использование инструментов или архитектура тестового программного обеспечения отличается от команды к команде\n\n"
                                "Этот вопрос тесно связан с\n\n"

                                "/framework_competition - <b>Структурным соревнованием</b>\n\n"

                                + open('localizedRegimes/localizedRegimes.txt', 'r').read() +

                                "\n/design_for_reuse - <b>Проектируйте для переиспользования</b>\n\n"
                                "/dont_reinvent_the_wheel - <b>Не изобретайте колесо</b> - используйте доступные ноу-хау, инструменты и процессы, когда это возможно.\n\n"
                                "/set_standarts - <b>Стандартизация</b> - установите и следуйте стандартам для артефактов автоматизации\n\n"
                                "/test_automation_owner - <b>Ответственный</b> - назначьте ответственного за автоматизацию тестирования\n\n"

                                "Другие полезные шаблоны::\n\n"

                                "/get_training - <b>Обучение для команды</b> - планируйте обучение для всех, кто участвует в проекте автоматизации тестирования\n\n"
                                "/share_information - <b>Поделиться информацией</b> - запрашивайте и предоставляйте информацию менеджерам, разработчикам, другим тестировщикам и клиентам\n\n"

                                "/start - Вернуться к началу процесса диагностики"

                           , parse_mode='html')


@bot.message_handler(commands=['lack_of_support'])
def lack_of_support(message):
    msg = bot.send_message(message.chat.id,
                           text="<b>Отсутствие поддержки</b>\n\n"
                                "Какой поддержки вам не хватает?\n\n"
                                "Если вам не хватает поддержки определенным образом, одно из следующих идей может дать вам идеи:\n\n"

                                "/managers_dont_see_the_value - <b>Менеджеры не видят ценности</b> - руководство поддерживает только на словах и/или уделяют автоматизации низкий приоритет\n\n"
                                "/testers_dont_help_the_automation_team - <b>Тестировщики не помогают команде автоматизации</b> \n\n"
                                "/developers_dont_help_the_automation_team - <b>Разработчики не помогают команде автоматизации</b>\n\n"
                                "/specialists_dont_help_the_automation_team - <b>Специалисты не помогают команде автоматизации </b> с особыми проблемами автоматизации (базы данных, сети и т. д.)\n\n"
                                "/nobody_helps_new_automators - <b>Никто не помогает новым автоматизаторам</b>\n\n"
                                "/unrealistic_expectations - <b>Нереалистичные ожидания</b> - руководство ожидало 'магию' от инструмента\n\n"
                                "/inadequate_support - <b>Недостаток поддержки</b> - если вы столкнулись с отсутствием поддержки сразу в нескольких областях\n\n"


                                "/improve - Вернуться к началу улучшения автоматизации тестирования\n"
                                "/start - Вернуться к началу процесса диагностики"
                           , parse_mode='html')


@bot.message_handler(commands=['lack_of_resources'])
def lack_of_resources(message):
    msg = bot.send_message(message.chat.id,
                           text="<b>Нехватка ресурсов</b>\n\n"

                                "/ad_hoc_automation - <b>Интуитивная автоматизация</b> - если у вас возникают такие проблемы как:\n\n"

                                "- Расходы на ресурсы автоматизации тестирования не были предусмотрены в бюджете\n\n"
                                "- Недостаточно машин для запуска автоматизации\n\n"
                                "- Базы данных для автоматизации должны использоваться совместно с разработкой или тестированием\n\n"
                                "- Недостаточно лицензий на инструменты\n\n"

                                "Больше причин нехватки ресурсов:\n\n"
                                "/schedule_slip - <b>Скользящее расписание</b> - время на автоматизацию не запланировано или его недостаточно\n\n"
                                "/limited_experience - <b>Нет опыта в автоматизации тестирования</b> - обучение автоматизации не планировалось\n\n"
                                "/inadequate_team - <b>Недостаточная команда</b> - никому не было поручено заниматься автоматизацией, это делается отдельно в свободное время\n\n"


                                "/improve - Вернуться к началу улучшения автоматизации тестирования\n"
                                "/start - Вернуться к началу процесса диагностики"
                           , parse_mode='html')


@bot.message_handler(commands=['lack_of_direction'])
def lack_of_direction(message):
    msg = bot.send_message(message.chat.id,
                           text="<b>Отсутствие направления</b>\n\n"

                                "/ad_hoc_automation - <b>Интуитивная автоматизация</b> - если у вас возникают такие проблемы как:\n\n"

                                "- никто не отвечает за автоматизацию тестирования, каждый делает то, что считает лучше всего, не сотрудничая с другими.\n\n"
                                "- автоматизация выполняется интуитивно без ведущей стратегии или архитектуры\n\n"

                                "Больше причин отсутствия направления:\n\n"
                                "/inadequate_support - <b>Недостаток поддержки</b> - менеджмент не поддерживает автоматизацию и она выполняется по инициативе 1 человека\n\n"
                                "/manual_mimicry - <b>Ручная мимикрия</b> - автоматизация ручных кейсов происходит как есть\n\n"
                                "/independent_test_cases - <b>Взаимозависимые тесты</b> - автоматизация ручных кейсов происходит как есть(2)\n\n"
                                "/limited_experience - <b>Нет опыта в автоматизации тестирования</b> - тестировщики, занимаясь автоматизацией, не знают как сделать хорошо\n\n"
                                "/localized_regimes - <b>Локализованные режимы</b> - использование инструментов или архитектура тестового ПО отличается от команды к команде\n\n"
                                "/unfocused_automation - <b>Несфокусированная автоматизация</b> - важные тесты не были автоматизированы, только простые\n\n"


                                "/improve - Вернуться к началу улучшения автоматизации тестирования\n"
                                "/start - Вернуться к началу процесса диагностики"
                           , parse_mode='html')


@bot.message_handler(commands=['lack_of_specific_knowledge'])
def lack_of_specific_knowledge(message):
    msg = bot.send_message(message.chat.id,
                           text="<b>Отсутствие конкретных знаний</b>\n\n"

                                "/limited_experience - <b>Нет опыта в автоматизации тестирования</b> - если у вас возникают такие проблемы как:\n\n"

                                "- нет знаний как пользоваться инструментом.\n\n"
                                "- нет знаний что именно автоматизировать\n\n"
                                "- нет знаний как писать автотесты\n\n"

                                "Больше причин отсутствия конкретных знаний:\n\n"
                                "/managers_dont_see_the_value - <b>Менеджеры не видят ценности</b> - менеджмент не знает, что означает автоматизация тестирования\n\n"
                                "/know_how_leakage - <b>Утечка экспертизы</b> - единственный, кто знал об автоматизации, покинул компанию\n\n"
                                "/inadequate_tools - <b>Неадекватные инструменты</b> - нет знаний как выбрать инструмент для автоматизации\n\n"
                                "/inadequate_documentation - <b>Недостаток документации</b> - мало или вообще нет полезной информации о тестируемом ПО в сценариях или другом месте\n\n"
                                "/inadequate_support - <b>Недостаток поддержки</b> - важные тесты не были автоматизированы, только простые\n\n"


                                "/improve - Вернуться к началу улучшения автоматизации тестирования\n"
                                "/start - Вернуться к началу процесса диагностики"
                           , parse_mode='html')


@bot.message_handler(commands=['management_expectations_not_met'])
def management_expectations_not_met(message):
    msg = bot.send_message(message.chat.id,
                           text="<b>Ожидания руководства в отношении автоматизации не оправдались</b>\n\n"

                                "/unrealistic_expectations - <b>Нереалистичные ожидания</b> - руководство ожидало слишком многого от автоматизации\n\n"
                                "/high_roi_expectations - <b>Ожидание высокой рентабельности</b> - ожидаемая окупаемость инвестиций (ROI) не была достигнута\n\n"
                                "/schedule_slip - <b>Скользящее расписание</b> - разработка автоматизации слишком медленная\n\n"
                                "/obscure_management_reports - <b>Неясные отчеты</b> - отчеты по автоматизации слишком сложны для анализа\n\n"
                                "/inefficient_failure_analysis - <b>Неэффективный анализ сбоев</b> - если отчеты о сбоях бесполезны\n\n"

                                "/improve - Вернуться к началу улучшения автоматизации тестирования\n"
                                "/start - Вернуться к началу процесса диагностики"
                           , parse_mode='html')


@bot.message_handler(commands=['automation_exec_expectations_not_met'])
def automation_exec_expectations_not_met(message):
    msg = bot.send_message(message.chat.id,
                           text="<b>Ожидания от автоматизации не оправдались</b>\n\n"

                                "/not_reliable_scripts - <b>Ненадежные скрипты</b> - автоматизированные скрипты не выполняются надежно.\n\n"
                                "/too_slow_scripts - <b>Слишком медленные скрипты</b> - автотесты выполняются слишком медленно\n\n"
                                "/manual_interventions - <b>Ручные вмешательства</b> - автотесты не могут выполняться без присмотра\n\n"
                                "/inadequate_tools - <b>Неадекватные инструменты</b> - текущие инструменты не могут надежно управлять тестируемым ПО\n\n"

                                "/improve - Вернуться к началу улучшения автоматизации тестирования\n"
                                "/start - Вернуться к началу процесса диагностики"
                           , parse_mode='html')


@bot.message_handler(commands=['automation_maintenance_expectations_not_met'])
def automation_maintenance_expectations_not_met(message):
    msg = bot.send_message(message.chat.id,
                           text="<b>Ожидания по тех. обслуживанию не оправдались</b>\n\n"

                                "/maintenance_costs_too_high - <b>Дорогое тех. обслуживание</b> - обслуживание автоматизации (считается) слишком дорогостоящим\n\n"
                                "/not_reusing_existing_data - <b>Данные не переиспользуются</b> - автотесты выполняются слишком медленно\n\n"
                                "/inadequate_documentation - <b>Недостаток документации</b> - нет того, что такое тесты, что делают скрипты, как работает автоматизация\n\n"
                                "/tool_dependency - <b>Зависимость инструмента</b> - автоматизация сделана с помощью инструмента, который больше не подходит\n\n"
                                "/obscure_tests - <b>Неясные тесты</b> - документации нет, поэтому с автоматизацией может работать только ее разработчик\n\n"
                                "/inadequate_revision_control - <b>Неадекватный контроль ревизий</b> - трудно связать автоматизированные скрипты с правильным выпуском тестируемого ПО\n\n"

                                "/improve - Вернуться к началу улучшения автоматизации тестирования\n"
                                "/start - Вернуться к началу процесса диагностики"
                           , parse_mode='html')


@bot.message_handler(commands=['stalled_automation'])
def stalled_automation(message):
    msg = bot.send_message(message.chat.id,
                           text=open('stalledAutomation/stalledAutomation_1.txt', 'r').read() +

                                "/non_technical_testers - <b>Нетехнические тестировщики</b> \n\n" +
                                open('stalledAutomation/stalledAutomation_2.txt', 'r').read() +

                                "Решение:\n\n"
                                "Самые рекомендуемые:\n\n"

                                "/do_a_pilot - <b>Подготовка пилота</b> - узнать, почему усилия по автоматизации зашли в тупик и что с этим делать\n\n"
                                "/lazy_automator - <b>Ленивый автоматизатор</b> - правильный шаблок на автоматизации водиночку\n\n"
                                "/maintain_the_testware - <b>Поддержка тестового обеспечения</b> - вы уже используете этот паттерн. Исключение - брошенная автоматизация\n\n"
                                "/test_automation_owner - <b>Ответственный</b> - назначьте 'владельца'. Если никто не чувствует права собственности на автоматизацию тестирования, никого не будет все равно, успешно это или нет.\n\n"
                                "/whole_team_approach - <b>Подход всей команды</b> - если вы хотите, чтобы ваши усилия по автоматизации тестирования были эффективными и успешными. "
                                "Это будет легко реализовать, если команда разработчиков тестируемого ПО уже приняла гибкий процесс. "
                                "В противном случае вам придется убедить разработчика сделать это, прежде чем вы сможете применить этот шаблон\n\n"

                                "Так же обратите внимание:\n\n"

                                "/abstraction_levels - <b>Уровни абстракции</b> - если тестировщики не могут эффективно использовать инструменты\n\n"
                                "/know_when_to_stop - <b>Знать когда остановиться</b> - этот шаблон поможет вам распознать, что вы не можете автоматизировать все\n\n"
                                "/learn_from_mistakes - <b>Учиться на ошибках</b> - эта модель помогает превратить ошибки в опыт обучения\n\n"
                                "/management_support - <b>Поддержка менеджмента</b> - примените этот шаблон, чтобы получить необходимую поддержку для использования других шаблонов\n\n"
                                "/sell_the_benefits - <b>Продажа преимуществ</b> - шаблон для тестирования solo без необходимой поддержки\n\n"
                                "/take_small_steps - <b>Маленькие шаги</b>  - шаблон, чтобы снова начать работу по автоматизации\n\n"
                                "/test_automation_framework - <b>Структура автоматизации</b> - проверьте, будут ли ваши проблемы решены с помощью этого шаблона\n\n"


                                "/improve - Вернуться к началу улучшения автоматизации тестирования\n"
                                "/start - Вернуться к началу процесса диагностики"
                           , parse_mode='html')


@bot.message_handler(commands=['set_clear_goals'])
def stalled_automation(message):
    text_1 = str(open('setClearGoals/setClearGoals_1.txt', 'r').read() +

                 "\n/share_information - <b>Поделиться информацией</b> - \n\n" +
                 open('setClearGoals/setClearGoals_2.txt', 'r').read() +

                 "\n/automate_whats_needed - <b>Автоматизируйте то что нужно.</b> \n\n"
                 "Не только ручные тесты могут быть автоматизированы. Например, автотест может проверить состояния объектов, которые не видны человеку.\n\n"
                 "Примеры целей выбора инструмента*: (См. также:\n")

    text_2 = str("/right_tools - <b>Правильные инструменты.</b> \n\n" +
                 open('setClearGoals/setClearGoals_3.txt', 'r').read() +

                 "/ad_hoc_automation - <b>Интуитивная автоматизация</b>\n\n"
                 "/high_roi_expectations - <b>Ожидание высокой рентабельности</b>\n\n"
                 "/inadequate_team - <b>Недостаточная команда</b>\n\n"
                 "/no_previous_test_automation - <b>Автоматизации еще не было</b>\n\n"
                 "/unrealistic_expectations - <b>Нереалистичные ожидания</b>\n\n"

                 "/no_previous_test_automation - Вернуться назад к разделу <b>Автоматизации еще не было</b>\n"
                 "/start - Вернуться к началу процесса диагностики")

    m = text_1 + "\n" + text_2
    if len(m) > 4095:
        for x in range(0, len(m), 4095):
            bot.send_message(message.chat.id, text=m[x:x + 4095], parse_mode='html')
    else:
        bot.send_message(message.chat.id, text=m, parse_mode='html')


@bot.message_handler(commands=['management_support'])
def stalled_automation(message):
    text_1 = str(open('managementSupport/managementSupport.txt', 'r').read() +

                 "\n/set_clear_goals Установить четкие цели - Либо просмотрите существующие цели автоматизации, либо встретьтесь с руководителями, чтобы убедиться, что их ожидания реалистичны, адекватно обеспечены ресурсами и финансируются.\n\n" +
                 "/test_automation_busoness_case - Создайте убедительный <b>Бизнес-кейс автоматизации теста</b> Автоматизация тестирования может быть довольно дорогой и требует, особенно в начале, больших усилий\n\n" +
                 "/do_a_pilot - <b>Подготовка пилота</b>  - Так руководство сможет «прикоснуться» к преимуществам автоматизации, и его будет проще убедить\n\n" +
                 "/sell_the_benefits - <b>Продажа преимуществ</b> - После того, как ваш пилот будет успешным, у вас будет гораздо больше шансов получить поддержку\n\n" +

                 "Некоторые предложения по текущей автоматизации тестирования:\n\n"

                 "/test_automation_owner - <b>Ответственный</b> - нужен для мониторинга состояния автоматизации тестирования\n\n"
                 "/share_information - <b>Поделиться информацией</b> - об автоматизации. Люди вскоре забывают о достигнутых выгодах, поэтому хорошо продолжать напоминать им\n\n"
                 "/inadequate_support - <b>Недостаток поддержки</b> - возможно, придется освободить некоторых людей от их текущих заданий\n\n"
                 "/inadequate_tools - <b>Неадекватные инструменты</b> -  вам может потребоваться инвестировать в новые инструменты или создать или пересмотреть \n\n"
                 "/test_automation_framework - <b>Структура автоматизации</b> \n\n"
                 "/sell_the_benefits - <b>Продажа преимуществ</b> - может потребоваться чтобы убедить руководство в том, что инвестиции будут полезными\n\n"

                 "Потенциальные проблемы"

                 "Не менее важно сформировать реалистичные ожидания относительно того, что может обеспечить проект автоматизации тестирования\n\n"
                 "/unrealistic_expectations - <b>Нереалистичные ожидания</b> - \n\n")

    text_2 = str(open('managementSupport/managementSupport_2.txt', 'r').read() +

                 "\n\nПроблемы, решаемые этой схемой:"

                 "/ad_hoc_automation - <b>Интуитивная автоматизация</b>\n\n"
                 "/automation_decay - <b>Автоматизация распада</b>\n\n"
                 "/brittle_scripts - <b>Хрупкие сценарии</b>\n\n"
                 "/data_creep - <b>Скользящие данные</b>\n\n"
                 "/high_roi_expectations - <b>Ожидание высокой рентабельности</b>\n\n"
                 "/inadequate_resources - <b>Недостаток ресурсов</b>\n\n"
                 "/inadequate_support - <b>Недостаток поддержки</b>\n\n"
                 "/inadequate_tools - <b>Неадекватные инструменты</b>\n\n"
                 "/no_previous_test_automation - <b>Автоматизации еще не было</b>\n\n"
                 "/schedule_slip - <b>Скользящее расписание</b>\n\n"
                 "/script_creep - <b>Скользящий сценарий</b>\n\n"
                 "/stalled_automation - <b>Автоматизация утеряна</b>\n\n"
                 "/sut_remake - <b>Переделка SUT</b>\n\n"
                 "/too_early_automation - <b>Слишком ранняя автоматизация</b>\n\n"
                 "/unautomatable_test_cases - <b>Тесты не подлежащие автоматизации</b>\n\n"
                 "/unfocused_automation - <b>Несфокусированная автоматизация</b>\n\n"

                 "/no_previous_test_automation - Вернуться назад к разделу <b>Автоматизации еще не было</b>\n"
                 "/start - Вернуться к началу процесса диагностики")

    m = text_1 + "\n" + text_2
    if len(m) > 4095:
        for x in range(0, len(m), 4095):
            bot.send_message(message.chat.id, text=m[x:x + 4095], parse_mode='html')
    else:
        bot.send_message(message.chat.id, text=m, parse_mode='html')


@bot.message_handler(commands=['test_automation_owner'])
def stalled_automation(message):
    m = str(open('testAutomationOwner/testAutomationOwner.txt', 'r').read() +

            "\n/look_ahead - <b>Смотреть вперед</b> - Либо просмотрите существующие цели автоматизации, либо встретьтесь с руководителями, чтобы убедиться, что их ожидания реалистичны, адекватно обеспечены ресурсами и финансируются.\n\n" +
            "/look_for_trouble - Создайте убедительный <b>Бизнес-кейс автоматизации теста</b> Автоматизация тестирования может быть довольно дорогой и требует, особенно в начале, больших усилий\n\n" +

            "Другие полезные паттерны:"

            "/celebrate_success - <b>Подготовка пилота</b>  - Так руководство сможет «прикоснуться» к преимуществам автоматизации, и его будет проще убедить\n\n" +
            "/share_information - <b>Поделиться информацией</b>\n\n"
            "/management_support - <b>Поддержка менеджмента</b> \n\n"

            "Потенциальные проблемы"
            "Самая большая опасность заключается в том, что владелец автоматизации тестирования решает покинуть компанию, не делясь своими знаниями. Также важно иметь ДЕПУТАТА. Владельцу автоматизации тестирования нужна поддержка со стороны руководства, если он пытается внести изменения в автоматизацию."

            "\n\nПроблемы, решаемые этой схемой:"

            "/ad_hoc_automation - <b>Интуитивная автоматизация</b>\n\n"
            "/automation_decay - <b>Автоматизация распада</b>\n\n"
            "/localized_regimes - <b>Локализованные режимы</b>\n\n"
            "/no_previous_test_automation - <b>Автоматизации еще не было</b>\n\n"
            "/stalled_automation - <b>Автоматизация утеряна</b>\n\n"
            "/tool_driven_automation - <b>Автоматизация на основе инструментов</b>\n\n"


            "/no_previous_test_automation - Вернуться назад к разделу <b>Автоматизации еще не было</b>\n"
            "/start - Вернуться к началу процесса диагностики")

    if len(m) > 4095:
        for x in range(0, len(m), 4095):
            bot.send_message(message.chat.id, text=m[x:x + 4095], parse_mode='html')
    else:
        bot.send_message(message.chat.id, text=m, parse_mode='html')


@bot.message_handler(commands=['dedicated_resources'])
def stalled_automation(message):
    m = str(open('dedicatedResources/dedicatedResources.txt', 'r').read() +

            "\n/full_time_job - <b>Работа полный день</b> - Проект автоматизации тестирования, возможно, требует больше усилий, чем проект по разработке программного обеспечения\n\n" +
            "/plan_support_activities - <b>Плановая поддержка</b>  - Чтобы вы могли связаться со специалистами (например, менеджерами баз данных), когда они вам понадобятся\n\n" +
            "/get_on_the_cloud - <b>Переходите в облако</b>  - Инструменты и машины для запуска тестов должны быть доступны и идеально предназначены для запуска автоматизированных тестов\n\n" +
            "/share_information - <b>Поделиться информацией</b> - Сообщите руководству, что вы не сможете успешно завершить проект, если команда не сможет полностью сосредоточиться на нем. Если это невозможно в течение всего проекта, то, по крайней мере, в начале проекта\n\n"

            "/flaky_tests - <b>Моргающие тесты</b>  - Если есть - вы должны проверить, может ли причина заключаться в том, что ваши ресурсы (машины, базы данных, сеть) используются одновременно каким-либо другим приложением. Если это так, убедитесь, что вы получаете необходимые ресурсы, когда они вам нужны для эксклюзивного использования\n\n" +

            "Проблемы, решаемые этой схемой:\n\n"

            "/ad_hoc_automation - <b>Интуитивная автоматизация</b>\n\n"
            "/false_fail - <b>Ложное падение</b>\n\n"
            "/flaky_tests - <b>Моргающие тесты</b>\n\n"
            "/inadequate_technical_resources - <b>Недостаточные технические ресурсы</b>\n\n"
            "/inconsistent_data - <b>Непоследовательные данные</b>\n\n"
            "/no_previous_test_automation - <b>Автоматизации еще не было</b>\n"
            "/schedule_slip - <b>Скользящее расписание</b>\n\n"
            "/hard_to_automate_results - <b>Трудноавтоматизируемые результаты</b>\n\n"

            "/no_previous_test_automation - Вернуться назад к разделу <b>Автоматизации еще не было</b>\n"
            "/start - Вернуться к началу процесса диагностики")

    if len(m) > 4095:
        for x in range(0, len(m), 4095):
            bot.send_message(message.chat.id, text=m[x:x + 4095], parse_mode='html')
    else:
        bot.send_message(message.chat.id, text=m, parse_mode='html')


@bot.message_handler(commands=['right_tools'])
def stalled_automation(message):
    m = str(open('rightTools/rightTools.txt', 'r').read() +

            "/no_previous_test_automation - Вернуться назад к разделу <b>Автоматизации еще не было</b>\n"
            "/start - Вернуться к началу процесса диагностики")

    if len(m) > 4095:
        for x in range(0, len(m), 4095):
            bot.send_message(message.chat.id, text=m[x:x + 4095], parse_mode='html')
    else:
        bot.send_message(message.chat.id, text=m, parse_mode='html')


@bot.message_handler(commands=['automation_roles'])
def stalled_automation(message):
    m = str(open('automationRoles/automationRoles.txt', 'r').read() +

            "/no_previous_test_automation - Вернуться назад к разделу <b>Автоматизации еще не было</b>\n"
            "/start - Вернуться к началу процесса диагностики")

    if len(m) > 4095:
        for x in range(0, len(m), 4095):
            bot.send_message(message.chat.id, text=m[x:x + 4095], parse_mode='html')
    else:
        bot.send_message(message.chat.id, text=m, parse_mode='html')


@bot.message_handler(commands=['automation_roles_experience'])
def stalled_automation(message):
    m = str(open('automationRoles/automationRole_experience.txt', 'r').read() +

            "/automation_roles - Вернуться назад к разделу <b>Роли автоматизации</b>\n"
            "/no_previous_test_automation - Вернуться назад к разделу <b>Автоматизации еще не было</b>\n"
            "/start - Вернуться к началу процесса диагностики")

    if len(m) > 4095:
        for x in range(0, len(m), 4095):
            bot.send_message(message.chat.id, text=m[x:x + 4095], parse_mode='html')
    else:
        bot.send_message(message.chat.id, text=m, parse_mode='html')


@bot.message_handler(commands=['whole_team_approach'])
def stalled_automation(message):
    m = str(open('whole_team_approach/whole_team_approach.txt', 'r').read() +

            "/no_previous_test_automation - Вернуться назад к разделу <b>Автоматизации еще не было</b>\n"
            "/start - Вернуться к началу процесса диагностики")

    if len(m) > 4095:
        for x in range(0, len(m), 4095):
            bot.send_message(message.chat.id, text=m[x:x + 4095], parse_mode='html')
    else:
        bot.send_message(message.chat.id, text=m, parse_mode='html')


@bot.message_handler(commands=['whole_team_approach_experience'])
def stalled_automation(message):
    m = str(open('whole_team_approach/whole_team_approach_experience.txt', 'r').read() +

            "/whole_team_approach - Вернуться назад к разделу <b>Подход всей команды</b>\n"
            "/no_previous_test_automation - Вернуться назад к разделу <b>Автоматизации еще не было</b>\n"
            "/start - Вернуться к началу процесса диагностики")

    if len(m) > 4095:
        for x in range(0, len(m), 4095):
            bot.send_message(message.chat.id, text=m[x:x + 4095], parse_mode='html')
    else:
        bot.send_message(message.chat.id, text=m, parse_mode='html')


bot.polling(none_stop=True)

# @bot.callback_query_handler(
#     lambda call: call.data == 'diagnostics')
# def layer_0(call):
#     try:
#         if call.data == 'diagnostics':
#             markup = get_diagnostics_markup()
#
#             msg = bot.send_message(call.message.chat.id,
#                                    text="Шаблоны автоматизации тестирования /наиболее /полезны, если вы можете сосредоточиться на тех, "
#                                         "которые действительно помогают решить ваши проблемы. Мы начинаем процесс диагностики, "
#                                         "задавая несколько вопросов. Некоторые приведут вас прямо к конкретной проблеме; "
#                                         "у других будет ряд возможных ответов, которые приведут к более подробным вопросам "
#                                         "или к проблеме, которая лучше всего описывает вашу проблему. "
#                                         "На любом уровне вы сможете вернуться на предыдущий уровень. "
#                                         "Ваши ответы должны помочь определить основные проблемы. "
#                                         "Эти вопросы содержат рекомендации по шаблонам, которые помогут вам решить ваши проблемы. "
#                                         "В /шаблонах разрешения мы даем некоторые рекомендации, но выбор того, "
#                                         "как применять шаблоны, — это то, о чем вам нужно будет подумать в вашей собственной ситуации.",
#
#                                    reply_markup=markup)
#             bot.register_next_step_handler(msg, layer_1)
#         else:
#             pass
#     except:
#         bot.send_message(call.message.chat.id, f'🚫 | Ошибка при выполнении команды')
#
#
# @bot.callback_query_handler(
#     lambda call: call.data == 'improve' or call.data == 'patterns' or call.data == 'experience' or call.data == 'problems' or call.data == 'back')
# def layer_1(call):
#     try:
#
#         if call.data == 'improve':
#             markup = get_improve_markup()
#
#             msg = bot.send_message(call.message.chat.id,
#                                    text='Что ниже описывает наиболее насущную проблему, которую вам предстоит решить на данный момент?\n'
#                                         'Если вы обнаружите, что более одного ответа подходит для вашего случая, начните с самого сложного. После того, как вы решите его, вы должны вернуться к этому вопросу и заняться следующими.',
#                                    reply_markup=markup)
#             bot.register_next_step_handler(msg, layer_1)
#
#         elif call.data == 'patterns':
#             markup = get_patterns_markup()
#
#             msg = bot.send_message(call.message.chat.id,
#                                    text=open('patterns/patterns_no_prev_auto.txt', 'r').read(), parse_mode='Markdown',
#                                    reply_markup=markup)
#             bot.register_next_step_handler(msg, layer_1)
#
#     except:
#         bot.send_message(call.message.chat.id, f'🚫 | Ошибка при выполнении команды')
