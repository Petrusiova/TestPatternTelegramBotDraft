<b>Поддерживаемое тестовое обеспечение.</b>

Контекст
Эта модель применима, когда ваши автоматизированные тесты будут проводиться в течение длительного времени и/или когда происходят частые изменения в SUT.
Этот шаблон не применим для одноразовых или одноразовых сценариев.

Описание
Определите самые дорогостоящие и/или наиболее частые изменения в обслуживании и спроектируйте свою автоматизацию, чтобы справиться с этими изменениями с наименьшими усилиями. Когда корректировки действительно необходимы, они должны быть относительно просты в реализации. Например, если объекты часто переименовываются, создайте таблицу преобразования из имени, которое вы хотите использовать в тестах, и введите любое имя объекта для текущей версии SUT.

/object_map - <b>Карта объекта</b>

Реализация

Есть много вариантов сделать и сохранить тестовое программное обеспечение поддерживаемым

/good_development_process - <b>Хороший процесс разработки</b> - очень хороший выбор: то, что работает для разработчиков программного обеспечения, работает и для автоматизации тестирования!

/good_programming_practices - <b>Хорошие практики программирования</b> - Например, если ваши скрипты в основном "автономны" без особого повторного использования, а автоматы часто заново изобретают аналогичные или даже дублированные сценарии или автоматизированные функции

/design_for_reuse - <b>Проектирование для переиспользования</b>

/object_map - <b>Карта объекта</b>

/domain_driven_testing - <b>Доменное тестирование</b> - автоматизация тестирования лучше всего работает как сотрудничество между тестировщиками и инженерами по автоматизации. Тестировщики знают SUT, но не обязательно искусны в инструментах автоматизации тестирования. Инженеры по автоматизации знают свои инструменты и скрипты, но могут не знать, как лучше всего протестировать SUT. Если тестировщики могут разработать для себя доменный язык для написания автоматизированных тестов, инженеры по автоматизации могут реализовать поддержку инструмента для него. Таким образом, каждый из них будет делать именно то, что делает лучше всего. Преимущество инженеров по автоматизации заключается в том, что таким образом тестировщики могут выполнять некоторые из техническом обслуживании самих тестов, оставляя инженерам больше времени для совершенствования режима автоматизации и решения проблем технического обслуживания.

    Например, если у вас есть структурированные и многоразовые сценарии, но существует нехватка тестовых автоматов для создания автоматизированных тестов (или им не хватает времени), этот шаблон возвращает тестерам запись тестов, как только автоматизаторы построят инфраструктуру для доменного тестового построения. Другими полезными шаблонами являются

/abstraction_levels - <b>Уровни абстракции</b>

/keyword_driven_testing - <b>Тестирование на основе ключевых слов</b>

/maintain_the_testware - <b>Поддержка тестового обеспечения</b> - одного ремонтопригодия недостаточно, на самом деле его необходимо поддерживать.

Потенциальные проблемы

Не ждите слишком долго, чтобы создать поддерживаемое тестовое программное обеспечение - это лучше всего думать прямо в начале усилий по автоматизации (хотя также никогда не поздно начать с улучшений).

Проблемы, решаемые этой схемой:

/brittle_scripts - <b>Хрупкие сценарии</b>

/data_creep - <b>Скользящие данные</b>

/high_roi_expectations - <b>Ожидание высокой рентабельности</b>

/no_previous_test_automation - <b>Автоматизации еще не было</b>

/obscure_tests - <b>Неясные тесты</b>

/script_creep - <b>Скользящий сценарий</b>

/tool_driven_automation - <b>Автоматизация на основе инструментов</b>


